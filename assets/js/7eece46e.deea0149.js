"use strict";(self.webpackChunkd2sv_sdk_builder=self.webpackChunkd2sv_sdk_builder||[]).push([[4858],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>d});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=i.createContext({}),u=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return i.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),h=u(n),d=o,m=h["".concat(c,".").concat(d)]||h[d]||p[d]||a;return n?i.createElement(m,l(l({ref:t},s),{},{components:n})):i.createElement(m,l({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=h;var r={};for(var c in t)hasOwnProperty.call(t,c)&&(r[c]=t[c]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var u=2;u<a;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4848:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>l,default:()=>s,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=n(7462),o=(n(7294),n(3905));const a={},l="AutoFetchableMixin",r={unversionedId:"api/nuc/models/mixins/autofetchable/autofetchable.mixin",id:"api/nuc/models/mixins/autofetchable/autofetchable.mixin",isDocsHomePage:!1,title:"AutoFetchableMixin",description:"Makes use of the module identifier to:",source:"@site/articles/api/nuc/models/mixins/autofetchable/autofetchable.mixin.md",sourceDirName:"api/nuc/models/mixins/autofetchable",slug:"/api/nuc/models/mixins/autofetchable/autofetchable.mixin",permalink:"/api/nuc/models/mixins/autofetchable/autofetchable.mixin",tags:[],version:"current",frontMatter:{},sidebar:"api",previous:{title:"BrowsableV2ResponseMixin",permalink:"/api/nuc/models/browsable/v2.response.mixin"},next:{title:"CommandableMixin",permalink:"/api/nuc/models/mixins/commandable/commandable.mixin"}},c=[{value:"How to apply the mixin to a model",id:"how-to-apply-the-mixin-to-a-model",children:[]},{value:"How use the mixin",id:"how-use-the-mixin",children:[]},{value:"makeAutoFetchable(options) : this",id:"makeautofetchableoptions--this",children:[]},{value:"automateFetch(boolean) : void",id:"automatefetchboolean--void",children:[]},{value:"isFetchable() : boolean",id:"isfetchable--boolean",children:[]},{value:"See Also",id:"see-also",children:[]}],u={toc:c};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"autofetchablemixin"},"AutoFetchableMixin"),(0,o.kt)("p",null,"Makes use of the module identifier to:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"check if the model can be fetched; the default property to check is 'id'"),(0,o.kt)("li",{parentName:"ul"},"fetch the model automatically when the identifier changes (if requested);\nthe default event to listen to is 'change:id'")),(0,o.kt)("h3",{id:"how-to-apply-the-mixin-to-a-model"},"How to apply the mixin to a model"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"var MyModel = Backbone.Model.extend({\n\n  constructor: function MyModel(attributes, options) {\n    Backbone.Model.prototype.constructor.apply(this, arguments);\n    this\n      .makeConnectable(options)\n      .makeFetchable(options)\n      .makeAutoFetchable(options);\n  }\n  \n});\n\nConnectableMixin.mixin(MyModel.prototype);\nFetchableMixin.mixin(MyModel.prototype);\nAutoFetchableMixin.mixin(MyModel.prototype);\n")),(0,o.kt)("p",null,"This mixin us usually comined together with the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectableMixin"),"\nor with another cumulated mixin which includes it and also with the\nwith the ",(0,o.kt)("inlineCode",{parentName:"p"},"FetchableMixin")," to prevent parallel fetches.  If you need\nall these three mixins, have a look at the ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceMixin"),", which\ncombines these three together."),(0,o.kt)("h3",{id:"how-use-the-mixin"},"How use the mixin"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// Enable watching for the model identifier changes\nvar model = new MyModel(undefined, {\n      connector: connector,\n      autofetch: true\n    });\n\n// A fetch will take place, notifying the event listeners about its progress\nmodel.set('id', 2000);\n")),(0,o.kt)("h2",{id:"makeautofetchableoptions--this"},"makeAutoFetchable(options) : this"),(0,o.kt)("p",null,"Must be called in the constructor to initialize the mixin functionality.\nExpects the Backbone.Model constructor options passed in."),(0,o.kt)("p",null,"Recognized option properies:"),(0,o.kt)("p",null,"autofetch\n: If set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", it executes the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch")," method whenever the model identifier changes\n(boolean, ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," is the default)"),(0,o.kt)("p",null,"autofetchEvent\n: Can override the event to listen to for the automatic fetching (string, 'change:id' by default)"),(0,o.kt)("h2",{id:"automatefetchboolean--void"},"automateFetch(boolean) : void"),(0,o.kt)("p",null,"Truns on or off the automatic fetching depending if you pass ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," in.\nIt can be used to change the behaviour set up by the constructor."),(0,o.kt)("h2",{id:"isfetchable--boolean"},"isFetchable() : boolean"),(0,o.kt)("p",null,"Returns ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," if the model is fetchable, otherwise ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),".  If the model is not fetchable,\nthe automatic fetching will not take place."),(0,o.kt)("h2",{id:"see-also"},"See Also"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ConnectableMixin"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"FetchableMixin"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ResourceMixin")))}s.isMDXComponent=!0}}]);